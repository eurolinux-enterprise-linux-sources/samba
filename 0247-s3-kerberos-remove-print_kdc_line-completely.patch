From 021d732dad60db2ed5f7c68a7e3aa08f35ea2ca5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?G=C3=BCnther=20Deschner?= <gd@samba.org>
Date: Mon, 13 Jan 2014 15:59:26 +0100
Subject: [PATCH 247/321] s3-kerberos: remove print_kdc_line() completely.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Just calling print_canonical_sockaddr() is sufficient, as it already deals with
ipv6 as well. The port handling, which was only done for IPv6 (not IPv4), is
removed as well. It was pointless because it always derived the port number from
the provided address which was either a SMB (usually port 445) or LDAP
connection. No KDC will ever run on port 389 or 445 on a Windows/Samba DC.
Finally, the kerberos libraries that we support and build with, can deal with
ipv6 addresses in krb5.conf, so we no longer put the (unnecessary) burden of
resolving the DC name on the kerberos library anymore.

Guenther

Signed-off-by: GÃ¼nther Deschner <gd@samba.org>
Reviewed-by: Andreas Schneider <asn@samba.org>

Conflicts:
	source3/libads/kerberos.c
---
 source3/libads/kerberos.c | 86 +++++------------------------------------------
 1 file changed, 9 insertions(+), 77 deletions(-)

diff --git a/source3/libads/kerberos.c b/source3/libads/kerberos.c
index 1153ccb2885..064e5f791d1 100644
--- a/source3/libads/kerberos.c
+++ b/source3/libads/kerberos.c
@@ -660,73 +660,6 @@ int kerberos_kinit_password(const char *principal,
 					   NULL);
 }
 
-/************************************************************************
-************************************************************************/
-
-static char *print_kdc_line(char *mem_ctx,
-			const char *prev_line,
-			const struct sockaddr_storage *pss,
-			const char *kdc_name)
-{
-	char *kdc_str = NULL;
-
-	if (pss->ss_family == AF_INET) {
-		kdc_str = talloc_asprintf(mem_ctx, "%s\tkdc = %s\n",
-					prev_line,
-                                        print_canonical_sockaddr(mem_ctx, pss));
-	} else {
-		char addr[INET6_ADDRSTRLEN];
-		uint16_t port = get_sockaddr_port(pss);
-
-		DEBUG(10,("print_kdc_line: IPv6 case for kdc_name: %s, port: %d\n",
-			kdc_name, port));
-
-		if (port != 0 && port != DEFAULT_KRB5_PORT) {
-			/* Currently for IPv6 we can't specify a non-default
-			   krb5 port with an address, as this requires a ':'.
-			   Resolve to a name. */
-			char hostname[MAX_DNS_NAME_LENGTH];
-			int ret = sys_getnameinfo((const struct sockaddr *)pss,
-					sizeof(*pss),
-					hostname, sizeof(hostname),
-					NULL, 0,
-					NI_NAMEREQD);
-			if (ret) {
-				DEBUG(0,("print_kdc_line: can't resolve name "
-					"for kdc with non-default port %s. "
-					"Error %s\n.",
-					print_canonical_sockaddr(mem_ctx, pss),
-					gai_strerror(ret)));
-				return NULL;
-			}
-			/* Success, use host:port */
-			kdc_str = talloc_asprintf(mem_ctx,
-					"%s\tkdc = %s:%u\n",
-					prev_line,
-					hostname,
-					(unsigned int)port);
-		} else {
-
-			/* no krb5 lib currently supports "kdc = ipv6 address"
-			 * at all, so just fill in just the kdc_name if we have
-			 * it and let the krb5 lib figure out the appropriate
-			 * ipv6 address - gd */
-
-			if (kdc_name) {
-				kdc_str = talloc_asprintf(mem_ctx, "%s\tkdc = %s\n",
-						prev_line, kdc_name);
-			} else {
-				kdc_str = talloc_asprintf(mem_ctx, "%s\tkdc = %s\n",
-						prev_line,
-						print_sockaddr(addr,
-							sizeof(addr),
-							pss));
-			}
-		}
-	}
-	return kdc_str;
-}
-
 /************************************************************************
  Create a string list of available kdc's, possibly searching by sitename.
  Does DNS queries.
@@ -746,7 +679,8 @@ static char *get_kdc_ip_string(char *mem_ctx,
 	struct ip_service *ip_srv_nonsite = NULL;
 	int count_site = 0;
 	int count_nonsite;
-	char *kdc_str = print_kdc_line(mem_ctx, "", pss, kdc_name);
+	char *kdc_str = talloc_asprintf(mem_ctx, "%s\tkdc = %s\n", "",
+					print_canonical_sockaddr(mem_ctx, pss));
 
 	if (kdc_str == NULL) {
 		return NULL;
@@ -768,10 +702,9 @@ static char *get_kdc_ip_string(char *mem_ctx,
 			}
 			/* Append to the string - inefficient
 			 * but not done often. */
-			kdc_str = print_kdc_line(mem_ctx,
-						kdc_str,
-						&ip_srv_site[i].ss,
-						NULL);
+			kdc_str = talloc_asprintf(mem_ctx, "%s\tkdc = %s\n",
+						  kdc_str,
+						  print_canonical_sockaddr(mem_ctx, &ip_srv_site[i].ss));
 			if (!kdc_str) {
 				SAFE_FREE(ip_srv_site);
 				return NULL;
@@ -806,11 +739,10 @@ static char *get_kdc_ip_string(char *mem_ctx,
 		}
 
 		/* Append to the string - inefficient but not done often. */
-		kdc_str = print_kdc_line(mem_ctx,
-				kdc_str,
-				&ip_srv_nonsite[i].ss,
-				NULL);
-		if (!kdc_str) {
+		kdc_str = talloc_asprintf(mem_ctx, "%s\tkdc = %s\n",
+					  kdc_str,
+					  print_canonical_sockaddr(mem_ctx, &ip_srv_nonsite[i].ss));
+		if (kdc_str == NULL) {
 			SAFE_FREE(ip_srv_site);
 			SAFE_FREE(ip_srv_nonsite);
 			return NULL;
-- 
2.14.3

