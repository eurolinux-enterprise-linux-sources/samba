From b5caa7a972e32932b2c31eca9d8401e9c7fa23d7 Mon Sep 17 00:00:00 2001
From: Andrew Bartlett <abartlet@samba.org>
Date: Thu, 7 Jul 2011 21:04:31 +1000
Subject: [PATCH 055/321] lib/util Move bitmap.c to lib/util

---
 lib/util/bitmap.c                | 137 +++++++++++++++++++++++++++++++++++++++
 lib/util/bitmap.h                |  32 +++++++++
 lib/util/wscript_build           |   8 ++-
 source3/Makefile.in              |   2 +-
 source3/include/proto.h          |   9 ---
 source3/include/smb.h            |   6 --
 source3/lib/bitmap.c             | 136 --------------------------------------
 source3/modules/vfs_acl_common.c |   1 +
 source3/modules/vfs_full_audit.c |   1 +
 source3/param/loadparm.c         |   1 +
 source3/passdb/pdb_get_set.c     |   1 +
 source3/smbd/conn.c              |   1 +
 source3/smbd/dir.c               |   1 +
 source3/smbd/files.c             |   1 +
 source3/smbd/smb2_server.c       |   1 +
 15 files changed, 185 insertions(+), 153 deletions(-)
 create mode 100644 lib/util/bitmap.c
 create mode 100644 lib/util/bitmap.h
 delete mode 100644 source3/lib/bitmap.c

diff --git a/lib/util/bitmap.c b/lib/util/bitmap.c
new file mode 100644
index 00000000000..4748f8bda27
--- /dev/null
+++ b/lib/util/bitmap.c
@@ -0,0 +1,137 @@
+/*
+   Unix SMB/CIFS implementation.
+   simple bitmap functions
+   Copyright (C) Andrew Tridgell 1992-1998
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "includes.h"
+#include "lib/util/bitmap.h"
+
+/* these functions provide a simple way to allocate integers from a
+   pool without repetition */
+
+/****************************************************************************
+talloc a bitmap
+****************************************************************************/
+struct bitmap *bitmap_talloc(TALLOC_CTX *mem_ctx, int n)
+{
+	struct bitmap *bm;
+
+	bm = talloc_zero(mem_ctx, struct bitmap);
+
+	if (!bm) return NULL;
+
+	bm->n = n;
+	bm->b = talloc_zero_array(bm, uint32_t, (n+31)/32);
+	if (!bm->b) {
+		TALLOC_FREE(bm);
+		return NULL;
+	}
+	return bm;
+}
+
+/****************************************************************************
+copy as much of the source bitmap as will fit in the destination bitmap.
+****************************************************************************/
+
+int bitmap_copy(struct bitmap * const dst, const struct bitmap * const src)
+{
+        int count = MIN(dst->n, src->n);
+
+        SMB_ASSERT(dst->b != src->b);
+	memcpy(dst->b, src->b, sizeof(uint32_t)*((count+31)/32));
+
+        return count;
+}
+
+/****************************************************************************
+set a bit in a bitmap
+****************************************************************************/
+bool bitmap_set(struct bitmap *bm, unsigned i)
+{
+	if (i >= bm->n) {
+		DEBUG(0,("Setting invalid bitmap entry %d (of %d)\n",
+		      i, bm->n));
+		return false;
+	}
+	bm->b[i/32] |= (1<<(i%32));
+	return true;
+}
+
+/****************************************************************************
+clear a bit in a bitmap
+****************************************************************************/
+bool bitmap_clear(struct bitmap *bm, unsigned i)
+{
+	if (i >= bm->n) {
+		DEBUG(0,("clearing invalid bitmap entry %d (of %d)\n",
+		      i, bm->n));
+		return false;
+	}
+	bm->b[i/32] &= ~(1<<(i%32));
+	return true;
+}
+
+/****************************************************************************
+query a bit in a bitmap
+****************************************************************************/
+bool bitmap_query(struct bitmap *bm, unsigned i)
+{
+	if (i >= bm->n) return false;
+	if (bm->b[i/32] & (1<<(i%32))) {
+		return true;
+	}
+	return false;
+}
+
+/****************************************************************************
+find a zero bit in a bitmap starting at the specified offset, with
+wraparound
+****************************************************************************/
+int bitmap_find(struct bitmap *bm, unsigned ofs)
+{
+	unsigned int i, j;
+
+	if (ofs > bm->n) ofs = 0;
+
+	i = ofs;
+	while (i < bm->n) {
+		if (~(bm->b[i/32])) {
+			j = i;
+			do {
+				if (!bitmap_query(bm, j)) return j;
+				j++;
+			} while (j & 31 && j < bm->n);
+		}
+		i += 32;
+		i &= ~31;
+	}
+
+	i = 0;
+	while (i < ofs) {
+		if (~(bm->b[i/32])) {
+			j = i;
+			do {
+				if (!bitmap_query(bm, j)) return j;
+				j++;
+			} while (j & 31 && j < bm->n);
+		}
+		i += 32;
+		i &= ~31;
+	}
+
+	return -1;
+}
diff --git a/lib/util/bitmap.h b/lib/util/bitmap.h
new file mode 100644
index 00000000000..cf7aa1b0bdd
--- /dev/null
+++ b/lib/util/bitmap.h
@@ -0,0 +1,32 @@
+/*
+   Unix SMB/CIFS implementation.
+   simple bitmap functions
+   Copyright (C) Andrew Tridgell 1992-1998
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+/* The following definitions come from lib/bitmap.c  */
+
+struct bitmap {
+	uint32_t *b;
+	unsigned int n;
+};
+
+struct bitmap *bitmap_talloc(TALLOC_CTX *mem_ctx, int n);
+int bitmap_copy(struct bitmap * const dst, const struct bitmap * const src);
+bool bitmap_set(struct bitmap *bm, unsigned i);
+bool bitmap_clear(struct bitmap *bm, unsigned i);
+bool bitmap_query(struct bitmap *bm, unsigned i);
+int bitmap_find(struct bitmap *bm, unsigned ofs);
diff --git a/lib/util/wscript_build b/lib/util/wscript_build
index b68791f88f2..7e9694677e8 100755
--- a/lib/util/wscript_build
+++ b/lib/util/wscript_build
@@ -99,5 +99,11 @@ bld.SAMBA_LIBRARY('tdb-wrap',
                   public_headers='tdb_wrap.h',
                   private_library=True,
                   local_include=False
-                  )
+                 )
+
+bld.SAMBA_LIBRARY('bitmap',
+		  source='bitmap.c',
+		  deps='talloc samba-util',
+                  local_include=False,
+		  private_library=True)
 
diff --git a/source3/Makefile.in b/source3/Makefile.in
index 4f9cbb4e6d9..d39cfee7185 100644
--- a/source3/Makefile.in
+++ b/source3/Makefile.in
@@ -455,7 +455,7 @@ LIB_OBJ = $(LIBSAMBAUTIL_OBJ) $(UTIL_OBJ) $(CRYPTO_OBJ) \
 	  lib/username.o \
 	  ../libds/common/flag_mapping.o \
 	  lib/access.o lib/smbrun.o \
-	  lib/bitmap.o lib/dprintf.o $(UTIL_REG_OBJ) \
+	  ../lib/util/bitmap.o lib/dprintf.o $(UTIL_REG_OBJ) \
 	  lib/wins_srv.o \
 	  lib/util_str.o lib/clobber.o lib/util_sid.o \
 	  lib/util_unistr.o ../lib/util/charset/codepoints.o lib/util_file.o \
diff --git a/source3/include/proto.h b/source3/include/proto.h
index 7303e76c961..8491d548eab 100644
--- a/source3/include/proto.h
+++ b/source3/include/proto.h
@@ -61,15 +61,6 @@ const char *audit_description_str(uint32 category);
 bool get_audit_category_from_param(const char *param, uint32 *audit_category);
 const char *audit_policy_str(TALLOC_CTX *mem_ctx, uint32 policy);
 
-/* The following definitions come from lib/bitmap.c  */
-
-struct bitmap *bitmap_talloc(TALLOC_CTX *mem_ctx, int n);
-int bitmap_copy(struct bitmap * const dst, const struct bitmap * const src);
-bool bitmap_set(struct bitmap *bm, unsigned i);
-bool bitmap_clear(struct bitmap *bm, unsigned i);
-bool bitmap_query(struct bitmap *bm, unsigned i);
-int bitmap_find(struct bitmap *bm, unsigned ofs);
-
 /* The following definitions come from lib/charcnv.c  */
 
 char lp_failed_convert_char(void);
diff --git a/source3/include/smb.h b/source3/include/smb.h
index 2d04373d7b6..457d2d7a076 100644
--- a/source3/include/smb.h
+++ b/source3/include/smb.h
@@ -712,7 +712,6 @@ struct connections_data {
 	uint32 unused_compatitibility_field;
 };
 
-
 /* the following are used by loadparm for option lists */
 typedef enum {
 	P_BOOL,P_BOOLREV,P_CHAR,P_INTEGER,P_OCTAL,P_LIST,
@@ -759,11 +758,6 @@ struct parm_struct {
 #define FLAG_META	0x8000 /* A meta directive - not a real parameter */
 #define FLAG_CMDLINE	0x10000 /* option has been overridden */
 
-struct bitmap {
-	uint32 *b;
-	unsigned int n;
-};
-
 /* offsets into message for common items */
 #define smb_com 8
 #define smb_rcls 9
diff --git a/source3/lib/bitmap.c b/source3/lib/bitmap.c
deleted file mode 100644
index bd56b4aad1a..00000000000
--- a/source3/lib/bitmap.c
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
-   Unix SMB/CIFS implementation.
-   simple bitmap functions
-   Copyright (C) Andrew Tridgell 1992-1998
-
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 3 of the License, or
-   (at your option) any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#include "includes.h"
-
-/* these functions provide a simple way to allocate integers from a
-   pool without repetition */
-
-/****************************************************************************
-talloc a bitmap
-****************************************************************************/
-struct bitmap *bitmap_talloc(TALLOC_CTX *mem_ctx, int n)
-{
-	struct bitmap *bm;
-
-	bm = TALLOC_P(mem_ctx, struct bitmap);
-
-	if (!bm) return NULL;
-
-	bm->n = n;
-	bm->b = TALLOC_ZERO_ARRAY(bm, uint32, (n+31)/32);
-	if (!bm->b) {
-		TALLOC_FREE(bm);
-		return NULL;
-	}
-	return bm;
-}
-
-/****************************************************************************
-copy as much of the source bitmap as will fit in the destination bitmap.
-****************************************************************************/
-
-int bitmap_copy(struct bitmap * const dst, const struct bitmap * const src)
-{
-        int count = MIN(dst->n, src->n);
-
-        SMB_ASSERT(dst->b != src->b);
-	memcpy(dst->b, src->b, sizeof(uint32)*((count+31)/32));
-
-        return count;
-}
-
-/****************************************************************************
-set a bit in a bitmap
-****************************************************************************/
-bool bitmap_set(struct bitmap *bm, unsigned i)
-{
-	if (i >= bm->n) {
-		DEBUG(0,("Setting invalid bitmap entry %d (of %d)\n",
-		      i, bm->n));
-		return False;
-	}
-	bm->b[i/32] |= (1<<(i%32));
-	return True;
-}
-
-/****************************************************************************
-clear a bit in a bitmap
-****************************************************************************/
-bool bitmap_clear(struct bitmap *bm, unsigned i)
-{
-	if (i >= bm->n) {
-		DEBUG(0,("clearing invalid bitmap entry %d (of %d)\n",
-		      i, bm->n));
-		return False;
-	}
-	bm->b[i/32] &= ~(1<<(i%32));
-	return True;
-}
-
-/****************************************************************************
-query a bit in a bitmap
-****************************************************************************/
-bool bitmap_query(struct bitmap *bm, unsigned i)
-{
-	if (i >= bm->n) return False;
-	if (bm->b[i/32] & (1<<(i%32))) {
-		return True;
-	}
-	return False;
-}
-
-/****************************************************************************
-find a zero bit in a bitmap starting at the specified offset, with
-wraparound
-****************************************************************************/
-int bitmap_find(struct bitmap *bm, unsigned ofs)
-{
-	unsigned int i, j;
-
-	if (ofs > bm->n) ofs = 0;
-
-	i = ofs;
-	while (i < bm->n) {
-		if (~(bm->b[i/32])) {
-			j = i;
-			do {
-				if (!bitmap_query(bm, j)) return j;
-				j++;
-			} while (j & 31 && j < bm->n);
-		}
-		i += 32;
-		i &= ~31;
-	}
-
-	i = 0;
-	while (i < ofs) {
-		if (~(bm->b[i/32])) {
-			j = i;
-			do {
-				if (!bitmap_query(bm, j)) return j;
-				j++;
-			} while (j & 31 && j < bm->n);
-		}
-		i += 32;
-		i &= ~31;
-	}
-
-	return -1;
-}
diff --git a/source3/modules/vfs_acl_common.c b/source3/modules/vfs_acl_common.c
index 11c34e05398..ac641d51f84 100644
--- a/source3/modules/vfs_acl_common.c
+++ b/source3/modules/vfs_acl_common.c
@@ -23,6 +23,7 @@
 #include "system/filesys.h"
 #include "../libcli/security/security.h"
 #include "../librpc/gen_ndr/ndr_security.h"
+#include "../lib/util/bitmap.h"
 
 static NTSTATUS create_acl_blob(const struct security_descriptor *psd,
 			DATA_BLOB *pblob,
diff --git a/source3/modules/vfs_full_audit.c b/source3/modules/vfs_full_audit.c
index 17713f07606..ea3c13912b6 100644
--- a/source3/modules/vfs_full_audit.c
+++ b/source3/modules/vfs_full_audit.c
@@ -64,6 +64,7 @@
 #include "../librpc/gen_ndr/ndr_netlogon.h"
 #include "auth.h"
 #include "ntioctl.h"
+#include "lib/util/bitmap.h"
 
 static int vfs_full_audit_debug_level = DBGC_VFS;
 
diff --git a/source3/param/loadparm.c b/source3/param/loadparm.c
index dd633399a05..753252ad216 100644
--- a/source3/param/loadparm.c
+++ b/source3/param/loadparm.c
@@ -64,6 +64,7 @@
 #include "smb_signing.h"
 #include "dbwrap.h"
 #include "smbldap.h"
+#include "../lib/util/bitmap.h"
 
 #ifdef HAVE_SYS_SYSCTL_H
 #include <sys/sysctl.h>
diff --git a/source3/passdb/pdb_get_set.c b/source3/passdb/pdb_get_set.c
index a276c16a804..63082e36d9f 100644
--- a/source3/passdb/pdb_get_set.c
+++ b/source3/passdb/pdb_get_set.c
@@ -25,6 +25,7 @@
 #include "passdb.h"
 #include "../libcli/auth/libcli_auth.h"
 #include "../libcli/security/security.h"
+#include "../lib/util/bitmap.h"
 
 #undef DBGC_CLASS
 #define DBGC_CLASS DBGC_PASSDB
diff --git a/source3/smbd/conn.c b/source3/smbd/conn.c
index 05e692fa508..2de364492eb 100644
--- a/source3/smbd/conn.c
+++ b/source3/smbd/conn.c
@@ -23,6 +23,7 @@
 #include "smbd/smbd.h"
 #include "smbd/globals.h"
 #include "rpc_server/rpc_ncacn_np.h"
+#include "lib/util/bitmap.h"
 
 /* The connections bitmap is expanded in increments of BITMAP_BLOCK_SZ. The
  * maximum size of the bitmap is the largest positive integer, but you will hit
diff --git a/source3/smbd/dir.c b/source3/smbd/dir.c
index e6c81064c58..18ecf066824 100644
--- a/source3/smbd/dir.c
+++ b/source3/smbd/dir.c
@@ -23,6 +23,7 @@
 #include "smbd/smbd.h"
 #include "smbd/globals.h"
 #include "libcli/security/security.h"
+#include "lib/util/bitmap.h"
 
 /*
    This module implements directory related functions for Samba.
diff --git a/source3/smbd/files.c b/source3/smbd/files.c
index 58c24a8e34c..cef391d1d9f 100644
--- a/source3/smbd/files.c
+++ b/source3/smbd/files.c
@@ -22,6 +22,7 @@
 #include "smbd/globals.h"
 #include "libcli/security/security.h"
 #include "util_tdb.h"
+#include "lib/util/bitmap.h"
 
 #define VALID_FNUM(fnum)   (((fnum) >= 0) && ((fnum) < real_max_open_files))
 
diff --git a/source3/smbd/smb2_server.c b/source3/smbd/smb2_server.c
index 96159074d0a..cf786dbe94c 100644
--- a/source3/smbd/smb2_server.c
+++ b/source3/smbd/smb2_server.c
@@ -26,6 +26,7 @@
 #include "../lib/tsocket/tsocket.h"
 #include "../lib/util/tevent_ntstatus.h"
 #include "smbprofile.h"
+#include "../lib/util/bitmap.h"
 
 #define OUTVEC_ALLOC_SIZE (SMB2_HDR_BODY + 9)
 
-- 
2.14.3

